@page "/storeowner/Books/Edit/{id:long}"
@page "/storeowner/books/Create"
@inherits OwningComponentBase<IBookRepository>
@using FPTBookManagement.Models.ViewModels
<style>
	div.validation-message {
		color: rgb(220, 53, 69);
		font-weight: 500
	}

	label {
		margin-left: 15px;
		color: white;
		font-size: 15px;
	}

	#text, #select, #number, #constance {
		margin-left: 10px;
		background-color: white;
		width: 98%;
	}
</style>

<h3 class="text-white text-center p-1">
	@TitleText a Product
</h3>
<EditForm Model="Model" OnValidSubmit="SaveBook">
	<DataAnnotationsValidator />
	@if (Model.Product.Id != 0)
	{
		<div class="form-group">
			<label>ID:</label>
			<input id="constance" class=" form-control" disabled value="@Model.Product.Id" />
		</div>
	}
	<br />
	<div class="form-group">
		<label>Title:</label>
		<ValidationMessage For="@(() => Model.Product.Title)" />
		<InputText id="text" class="form-control" @bind-Value="Model.Product.Title" />
	</div>
	<br />
	<div class="form-group">
		<label>Category:</label>
		<ValidationMessage For="@(() => Model.Product.Category)" />
		<InputSelect id="select" class="form-control" @bind-Value="Model.Product.Category">
			@foreach (var c in Model.Categories.Where(l => l.Approved == true))
			{
				<option value="@c.CategoryName.ToString()">@c.CategoryName.ToString()</option>
			}
		</InputSelect>

	</div>
	<br />
	<div class="form-group">
		<label>Price:</label>
		<ValidationMessage For="@(() => Model.Product.Price)" />
		<InputNumber id="number" class="form-control" @bind-Value="Model.Product.Price" />
	</div>
	<br />
	<div class="form-group">
		<label>Author:</label>
		<ValidationMessage For="@(() => Model.Product.Author)" />
		<InputText id="text" class="form-control" @bind-Value="Model.Product.Author" />
	</div>
	<br />
	<div class="form-group">
		<label>Publisher:</label>
		<ValidationMessage For="@(() => Model.Product.Publisher)" />
		<InputText id="text" class="form-control" @bind-Value="Model.Product.Publisher" />
	</div>
	<br />
	<div class="mt-2">
		<button style="margin-left:10px;" type="submit" class="btn btn-@ThemeColor">Save</button>
		<NavLink class="btn btn-secondary" href="/admin/products">Cancel</NavLink>
	</div>

</EditForm>


@code {
	public IBookRepository Repository => Service;

	[Inject]
	public NavigationManager? NavManager { get; set; }

	[Inject]
	public ICategoryRepository? CategoryRepository { get; set; }

	[Parameter]
	public long id { get; set; } = 0;

	public ProductAdminEditorViewModel? Model { get; set; } = new();

	protected override void OnParametersSet()
	{
		List<Category> categoryList = CategoryRepository.Categories.ToList();

		Model.Categories = categoryList;

		if (id != 0)
		{
			Model.Product = Repository.Books.FirstOrDefault(p => p.Id == id) ?? new();
		}
	}

	public void SaveBook()
	{
		if (id == 0)
		{
			Repository.CreateItem(Model.Product);
		}
		else
		{
			Repository.SaveItem(Model.Product);
		}
		NavManager?.NavigateTo("/StoreOwner/Books");
	}
	public string ThemeColor => id == 0 ? "primary" : "warning";
	public string TitleText => id == 0 ? "Create" : "Edit";
}